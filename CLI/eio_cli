#!/usr/bin/python
#
# Copyright (C) 2012 STEC, Inc. All rights not specifically granted
# under a license included herein are reserved
# Wrote a python based CLI for admistration of Enhanceio Driver
# Sanoj Unnikrishnan <sunnikrishnan@stec-inc.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; under version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import os
import sys
import re
import subprocess
import json
import ctypes
from fcntl import ioctl
from argparse import ArgumentParser
import logging

log = logging.getLogger('eio_cli')


# TBD : Change ioctl numbers to comply with linux kernel convention
EIODEV = '/dev/eiodev'
EIO_IOC_CREATE = 1104168192
EIO_IOC_DELETE = 1104168193
EIO_IOC_ENABLE = 1104168194
EIO_IOC_DISABLE = 1104168195
EIO_IOC_EDIT = 1104168196
EIO_IOC_NCACHES = 1104168197
EIO_IOC_CACHE_LIST = 1104168198
EIO_IOC_SSD_ADD = 1104168199
EIO_IOC_SSD_REMOVE = 1104168200
EIO_IOC_SRC_ADD = 1104168201
EIO_IOC_SRC_REMOVE = 1104168202
IOC_BLKGETSIZE64 = 0x80081272
IOC_SECTSIZE = 0x1268
SUCCESS = 0
FAILURE = 3
IOCTL_FAILURE = 5


MODE_ID_TO_DESC = {3: "Write Through", 1: "Write Back", 2: "Read Only"}
# XXX: really, IDS and NAMES should be reversed, but both are confusing
MODE_IDS = {"wt": 3, "wb": 1, "ro": 2}
MODE_NAMES = {v: k for k, v in MODE_IDS.viewitems()}
POLICY_NAMES = {3: "rand", 1: "fifo", 2: "lru"}
POLICY_IDS = {v: k for k, v in POLICY_NAMES.viewitems()}
BLKSIZES = (2048, 4096, 8192)
ASSOCIATIVITY = {2048: 128, 4096: 256, 8192: 512}

FIOCMD = "fio --rw=randrw --verify=meta --verify_pattern=0x3982 --ioengine=libaio \
        --iodepth=16 --direct=1 --size=1G --bsrange=512-128K --numjobs=10 \
        --group_reporting --time_based --runtime=180 --name=job1 --filename="

udev_template = """
ACTION!="add|change", GOTO="EIO_EOF"
SUBSYSTEM!="block", GOTO="EIO_EOF"

<cache_match_expr>, GOTO="EIO_CACHE"
<source_match_expr>, GOTO="EIO_SOURCE"

# If none of the rules above matched then it isn't an \
EnhanceIO device so ignore it.
GOTO="EIO_EOF"

#=================== EIO_CACHE =======================

# If we just found the cache device and the source already \
exists then we can setup

LABEL="EIO_CACHE"
TEST!="/dev/enhanceio/<cache_name>", \
PROGRAM="/bin/mkdir -p /dev/enhanceio/<cache_name>"
PROGRAM="/bin/sh -c 'echo $kernel > /dev/enhanceio/<cache_name>/.ssd_name'"
TEST=="/proc/enhanceio/<cache_name>", \
RUN+="/sbin/eio_cli notify -a add -s /dev/$kernel -c <cache_name>", \
GOTO="EIO_EOF"

TEST=="/dev/enhanceio/<cache_name>/.disk_name", GOTO="EIO_SETUP"

GOTO="EIO_EOF"

#=================== EIO_SOURCE =======================

# If we just found the source device and the cache already \
exists then we can setup

LABEL="EIO_SOURCE"
TEST=="/dev/enhanceio/<cache_name>/.eio_delete", GOTO="EIO_SOURCE_DELETE"
TEST!="/dev/enhanceio/<cache_name>", PROGRAM="/bin/mkdir -p \
/dev/enhanceio/<cache_name>"
PROGRAM="/bin/sh -c 'echo $kernel > /dev/enhanceio/<cache_name>/.disk_name'"

PROGRAM="/bin/sh -c 'echo $major $minor > \
/dev/enhanceio/<cache_name>/.disk_mjr_mnr'"

PROGRAM="/bin/sh -c 'echo $links > \
/dev/enhanceio/<cache_name>/.srclinks'"

TEST=="/proc/enhanceio/<cache_name>",\
PROGRAM="/bin/grep 'state\s*failed' /proc/enhanceio/<cache_name>/config", \
PROGRAM="/bin/grep 'no_source_dev\s*1' /proc/enhanceio/<cache_name>/errors", \
RUN+="/sbin/eio_cli notify -a add -d /dev/$kernel -c <cache_name>", NAME="", \
GOTO="EIO_EOF"

TEST!="/proc/enhanceio/<cache_name>", \
TEST!="/dev/enhanceio/<cache_name>/.eio_delete", ACTION!="change", NAME=""

TEST=="/dev/enhanceio/<cache_name>/.ssd_name", GOTO="EIO_SETUP"

GOTO="EIO_EOF"

#=================== EIO_SOURCE_DELETE =======================

LABEL="EIO_SOURCE_DELETE"
PROGRAM="/bin/sh -c 'cat /dev/enhanceio/<cache_name>/.disk_name'", \
ENV{disk_name}="%c"
TEST=="/dev/enhanceio/<cache_name>/.disk_name", ENV{disk_name}=="?*", \
NAME="$env{disk_name}"
PROGRAM="/bin/unlink /dev/enhanceio/<cache_name>/.disk_name"
PROGRAM="/bin/unlink /dev/enhanceio/<cache_name>/.disk_mjr_mnr"
GOTO="EIO_EOF"
#=================== EIO_SETUP =======================

LABEL="EIO_SETUP"
PROGRAM="/bin/sh -c 'cat /dev/enhanceio/<cache_name>/.ssd_name'", \
ENV{ssd_name}="%c"
PROGRAM="/bin/sh -c 'cat /dev/enhanceio/<cache_name>/.disk_name'", \
ENV{disk_name}="%c"

TEST!="/proc/enhanceio/<cache_name>", \
TEST!="/dev/enhanceio/<cache_name>/.skip_enable", \
RUN+="/bin/sh -c '/bin/mknod /dev/$env{disk_name} b \
`/bin/cat /dev/enhanceio/<cache_name>/.disk_mjr_mnr`'"

TEST!="/proc/enhanceio/<cache_name>", \
RUN+="/bin/sh -c ' for i in `cat /dev/enhanceio/<cache_name>/.srclinks`; \
do rm -f /dev/$$i; ln -f -s /dev/$env{disk_name} /dev/$$i; done'"


TEST!="/proc/enhanceio/<cache_name>", RUN+="/sbin/eio_cli \
enable -d /dev/$env{disk_name} -s /dev/$env{ssd_name} -m <mode> \
-b <block_size> -p <policy> -c <cache_name>"

LABEL="EIO_EOF"
"""


def make_udev_match_expr(dev_path, cache_name):
    dict_udev = {}
    status = run_cmd("udevadm info --query=property --name=" + dev_path)
    for line in status.output.split('\n'):
        if line is not '':
            temp = line.split("=", 1)
            dict_udev[temp[0].strip()] = temp[1].strip()

    # DM devices
    if dict_udev["DEVTYPE"] == "disk" and "DM_UUID" in dict_udev:
        match_expr = 'ENV{DM_UUID}=="' + dict_udev["DM_UUID"] + \
            '", ENV{DEVTYPE}=="' + dict_udev["DEVTYPE"] + '"'
        return match_expr

    # MD devices
    if "MD_UUID" in dict_udev:
        if dict_udev["DEVTYPE"] == "disk" and \
                "MD_DEV_UUID" not in dict_udev:
            match_expr = 'ENV{MD_UUID}=="' + dict_udev["MD_UUID"] + \
                '", ENV{DEVTYPE}=="' + dict_udev["DEVTYPE"] + '"'
            return match_expr

        elif dict_udev["DEVTYPE"] == "partition":
            try:
                with open("/sys" + dict_udev["DEVPATH"] + "/partition") as f:
                    partition_num = f.read().strip()
                    match_expr = 'ENV{MD_UUID}=="' + \
                        '", ENV{MD_DEV_UUID}=="' + \
                        '", ATTR{partition}=="' + partition_num + '"'
                    return match_expr
            except IOError:
                pass

    # Partition
    if dict_udev["DEVTYPE"] == "partition" and "ID_SERIAL" in dict_udev:
        try:
            with open("/sys" + dict_udev["DEVPATH"] + "/partition") as f:
                partition_num = f.read().strip()
                match_expr = 'ENV{ID_SERIAL}=="' + \
                    dict_udev["ID_SERIAL"] + \
                    '", ATTR{partition}=="' + partition_num + '"'
                return match_expr
        except IOError:
            pass

    # Disk
    if dict_udev["DEVTYPE"] == "disk" and "ID_SERIAL" in dict_udev:
        match_expr = 'ENV{ID_SERIAL}=="' + dict_udev["ID_SERIAL"] + \
            '", ENV{DEVTYPE}=="' + dict_udev["DEVTYPE"] + '"'
        return match_expr

    # Partition or disk w/ filesystem
    if "ID_FS_UUID" in dict_udev:
        match_expr = 'ENV{DM_NAME}!="' + cache_name + \
            '", ENV{ID_FS_UUID}=="' + dict_udev["ID_FS_UUID"] + '"'
        return match_expr


def run_cmd(cmd):
    # Utility function that runs a command
    log.debug("Running subprocess: %s", cmd)
    process = subprocess.Popen(
        cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
    output = process.stdout.read()
    ret = process.wait()
    log.debug("Process returned with %d exit code", ret)
    status = Status(output, ret)
    return status


def get_caches_list():

    # Utility function that obtains cache list
    cache_list = [f for f in os.listdir('/proc/enhanceio/')]
    for name in cache_list:
        if name == "version":
            cache_list.remove(name)
    return cache_list


def sanity(hdd, ssd):
    # Performs a very basic regression of operations

    for mode in MODE_IDS.viewkeys():
        for policy in POLICY_IDS.viewkeys():
            for blksize in BLKSIZES:
                cache = Cache_rec(name="test_cache", src_name=hdd,
                                  ssd_name=ssd, policy=policy, mode=mode,
                                  blksize=blksize)
                cache.create()
                run_cmd(FIOCMD + hdd)
                cache.delete()


def load_cache_data(cache_name):
    cache_data_dir = os.path.join('/proc/enhanceio', cache_name)
    if not os.access(cache_data_dir, os.R_OK | os.X_OK):
        raise OSError('Cannot access cache data for %s cache' % cache_name)
    data = {}
    for data_section in ('config', 'errors', 'io_hist', 'stats'):
        section_fn = os.path.join(cache_data_dir, data_section)
        if not os.access(section_fn, os.R_OK):
            log.error("Cannot access %s", section_fn)
            continue
        section = {}
        with open(section_fn, 'r') as fd:
            for line in fd:
                data_key, value = line.strip().split(None, 1)
                if value.isdigit():
                    value = int(value)
                section[data_key] = value
        data[data_section] = section
    return data


# Class that represents cache. Also used to pass ioctl to driver
class Cache_rec(ctypes.Structure):
    _fields_ = [
        ("name", ctypes.c_char * 32),
        ("src_name", ctypes.c_char * 128),
        ("ssd_name", ctypes.c_char * 128),
        ("ssd_uuid", ctypes.c_char * 128),
        ("src_size", ctypes.c_ulonglong),
        ("ssd_size", ctypes.c_ulonglong),
        ("src_sector_size", ctypes.c_uint),
        ("ssd_sector_size", ctypes.c_uint),
        ("flags", ctypes.c_uint),
        ("policy", ctypes.c_byte),
        ("mode", ctypes.c_byte),
        ("persistence", ctypes.c_byte),
        ("cold_boot", ctypes.c_byte),
        ("blksize", ctypes.c_ulonglong),
        ("assoc", ctypes.c_ulonglong)
    ]

    def __init__(self, name, src_name="", ssd_name="", src_size=0,
                 ssd_size=0, src_sector_size=0, ssd_sector_size=0,
                 flags=0, policy="", mode="", persistence=0, cold_boot="",
                 blksize=0, assoc=""):
        self.name = name
        self.src_name = src_name
        self.ssd_name = ssd_name
        self.src_size = src_size
        self.src_sector_size = src_sector_size
        self.ssd_size = ssd_size
        self.ssd_sector_size = ssd_sector_size
        self.flags = flags
        self.policy = POLICY_IDS.get(policy, 0)
        self.mode = MODE_IDS.get(mode, 0)
        self.persistence = persistence
        self.blksize = int(blksize)
        self.assoc = ASSOCIATIVITY.get(self.blksize, 0)

    def get_cache_data(self):
        return load_cache_data(self.name)

    def print_info(self, print_state=True):

        # Display Cache info

        print "Cache Name       : " + self.name
        print "Source Device    : " + self.src_name
        print "SSD Device       : " + self.ssd_name
        print "Policy           : " + POLICY_NAMES.get(self.policy, 'N/A')
        print "Mode             : " + MODE_ID_TO_DESC.get(self.mode, 'N/A')
        print "Block Size       : " + str(self.blksize)
        print "Associativity    : " + str(self.assoc)
        if print_state:
            state = self.get_cache_data()['config']['state']
            print "State            : " + str(state)
        return SUCCESS

    def do_eio_ioctl(self, ioc_type):
        # send ioctl to driver
        fd = open(EIODEV, "r")
        try:
            if ioctl(fd, ioc_type, ctypes.addressof(self)) == SUCCESS:
                return SUCCESS
        except Exception:
            log.exception("Problem encounteered sending ioctl")
        return IOCTL_FAILURE

    def clean(self):
        # do sysctl corresponding to clean
        sysctl_flag = "dev.enhanceio." + self.name + ".do_clean=1"
        cmd = "/sbin/sysctl " + sysctl_flag
        log.info("Setting sysctl flag to clean %s", sysctl_flag)
        run_cmd(cmd)

    def load_cache_info(self):
        # function to extract information from /proc/enhanceio
        config = self.get_cache_data().get('config')
        if not config:
            return FAILURE

        self.src_name = config['src_name']
        self.ssd_name = config['ssd_name']
        self.mode = config['mode']
        self.policy = config['eviction']
        self.blksize = config['block_size']
        self.assoc = ASSOCIATIVITY.get(self.blksize, 0)

        return SUCCESS

    def create(self, create_udev_rules=True):
        self.src_sz, self.src_sector_size = get_device_size_info(self.src_name)
        self.ssd_sz, self.ssd_sector_size = get_device_size_info(self.ssd_name)

        self.print_info(print_state=False)
        if self.do_eio_ioctl(EIO_IOC_CREATE) == SUCCESS:
            if create_udev_rules:
                self.create_rules()
            log.info('Cache created successfully')
            return SUCCESS
        else:
            log.error(
                'Cache creation failed (dmesg can provide you more info)')

        return FAILURE

    def edit(self):
        mode = self.mode
        policy = self.policy
        if self.load_cache_info() == SUCCESS:
            if mode != 0:
                self.mode = mode
            if policy != 0:
                self.policy = policy

            if self.do_eio_ioctl(EIO_IOC_EDIT) == SUCCESS:
                self.create_rules()
                log.info('Cache edited Successfully')
                return SUCCESS
            else:
                log.error(
                    'Edit cache failed (dmesg can provide you more info)')
        else:
            log.error('Requested cache not found')

        return FAILURE

    def create_rules(self):

        source_match_expr = make_udev_match_expr(self.src_name, self.name)
        log.debug("Source device udev match expression: %s", source_match_expr)
        cache_match_expr = make_udev_match_expr(self.ssd_name, self.name)
        log.debug("Cache device udev match expression: %s", cache_match_expr)

        try:
            # XXX: move to format
            udev_rule = udev_template.replace("<cache_name>", self.name)
            udev_rule = udev_rule.replace(
                "<source_match_expr>", source_match_expr)
            udev_rule = udev_rule.replace(
                "<cache_match_expr>", cache_match_expr)
            udev_rule = udev_rule.replace("<mode>", MODE_NAMES.get(self.mode, 'N/A'))
            udev_rule = udev_rule.replace("<block_size>", str(self.blksize))
            udev_rule = udev_rule.replace(
                "<policy>", POLICY_NAMES.get(self.policy, 'N/A'))

            # write rule file
            rule_file_path = os.path.join(
                "/etc/udev/rules.d, 94-enhanceio-%s.rules" % self.name)
            rule_file = open(rule_file_path, "w")
            rule_file.write(udev_rule)
            return SUCCESS

        except Exception:
            log.exception("Creation of udev rules file failed")
            return FAILURE

    def delete(self):

        if self.load_cache_info() == FAILURE:
            print "No cache exists with the name " + self.name
            return FAILURE

        delete_fn = os.path.join("/dev/enhanceio", self.name, ".eio_delete")
        run_cmd("/bin/touch %s" % delete_fn)

        if self.do_eio_ioctl(EIO_IOC_DELETE) == SUCCESS:
            if self.delete_rules() == SUCCESS:
                return SUCCESS
        else:
            print 'Cache deletion failed (dmesg can provide you more info)'

        if os.path.exists(delete_fn):
            os.remove(delete_fn)

        return FAILURE

    def delete_rules(self):

        rule_file_path = os.path.join(
            "/etc/udev/rules.d, 94-enhanceio-%s.rules" % self.name)
        log.info("Removing file %s", rule_file_path)
        try:
            os.remove(rule_file_path)
            log.info("Done removing rule file")
            return SUCCESS
        except Exception:
            log.exception(
                "Unable to delete rule file (please remove it manually)")
        return FAILURE


class Status:
    output = ""
    ret = 0

    def __init__(self, outstr="", outret=0):
        self.output = outstr
        self.ret = outret



def get_device_size_info(device_name):
    if not os.access(device_name, os.R_OK):
        raise OSError('Device %s cannot be accessed' % device_name)
        
    status = run_cmd("blockdev --getsize64 " + device_name)
    dev_size = int(status.output.split()[0])
    
    status = run_cmd("blockdev --getss " + device_name)
    dev_sect_size = int(status.output.split()[0])
    
    return dev_size, dev_sect_size


def print_all_cache_info(print_json=False, json_indent=True):
    cache_list = get_caches_list()
    if not cache_list:
        log.error("No caches Found")
        return FAILURE
    if print_json:
        caches = {}
        for cache_name in cache_list:
            cache = Cache_rec(name=cache_name)
            caches[cache_name] = cache.get_cache_data()
        print json.dumps(caches, indent=(4 if json_indent else 0))
        return SUCCESS
    else:
        for cache_name in cache_list:
            cache = Cache_rec(name=cache_name)
            cache.load_cache_info()
            cache.print_info()
        return SUCCESS


def create_parser():

    mainparser = ArgumentParser()
    parser = mainparser.add_subparsers(dest='command')

    mainparser.add_argument(
        '--debug', dest='log_level', action='store_const',
        const=logging.DEBUG, help='Debug level logging',
        default=logging.INFO)
    mainparser.add_argument(
        '--quiet', dest='log_level', action='store_const',
        const=logging.ERROR, help='Only log errors')

    # delete
    parser_delete = parser.add_parser('delete', help='used to delete cache')
    parser_delete.add_argument(
        "-c", action="store", dest="cache", required=True)

    # edit
    parser_edit = parser.add_parser('edit', help="used to edit \
                                        cache policy or mode or both")
    parser_edit.add_argument("-c", action="store",
                             dest="cache", required=True)
    parser_edit.add_argument(
        "-m", action="store", dest="mode", choices=MODE_IDS,
        help="cache mode", default="")
    parser_edit.add_argument("-p", action="store", dest="policy",
                             choices=POLICY_IDS, help="cache "
                             "replacement policy", default="")

    # info
    parser_info = parser.add_parser(
        'info', help='displays information about currently create caches')
    parser_info.add_argument(
        '--json', action='store_true',
        help='print detailed info as json instead')

    # clean
    parser_clean = parser.add_parser(
        'clean', help='clean the dirty blocks in the cache '
        '(Applicable only to writeback caches)')
    parser_clean.add_argument("-c", action="store",
                              dest="cache", required=True)

    # create
    parser_create = parser.add_parser('create', help="create")
    parser_create.add_argument("-d", action="store", dest="hdd",
                               required=True, help="name of the source device")
    parser_create.add_argument("-s", action="store", dest="ssd",
                               required=True, help="name of the ssd device")
    parser_create.add_argument("-p", action="store", dest="policy",
                               choices=POLICY_IDS,
                               help="cache replacement policy", default="lru")
    parser_create.add_argument("-m", action="store", dest="mode",
                               choices=MODE_IDS,
                               help="cache mode", default="wt")
    parser_create.add_argument("-b", action="store", dest="blksize",
                               type=int, choices=BLKSIZES, default=4096,
                               help="block size for cache")
    parser_create.add_argument(
        "-c", action="store", dest="cache", required=True)
    parser_create.add_argument(
        "--no-udev", action="store_true", dest="no_udev",
        help="Skip creating udev rules for the cache")

    # enable
    parser_enable = parser.add_parser('enable', help='used to enable cache')
    parser_enable.add_argument("-d", action="store", dest="hdd",
                               required=True, help="name of the source device")
    parser_enable.add_argument("-s", action="store", dest="ssd",
                               required=True, help="name of the ssd device")
    parser_enable.add_argument("-p", action="store", dest="policy",
                               choices=["rand", "fifo", "lru"],
                               help="cache replacement policy", default="lru")
    parser_enable.add_argument("-m", action="store", dest="mode",
                               choices=MODE_IDS,
                               help="cache mode", default="wt")
    parser_enable.add_argument("-b", action="store", dest="blksize",
                               choices=BLKSIZES, type=int,
                               default=4096, help="block size for cache")
    parser_enable.add_argument(
        "-c", action="store", dest="cache", required=True)

    # notify
    parser_notify = parser.add_parser('notify')
    parser_notify.add_argument("-s", action="store", dest="ssd",
                               help="name of the ssd device")
    parser_notify.add_argument("-a", action="store", dest="action",
                               help="add/remove/reboot")
    parser_notify.add_argument("-d", action="store", dest="hdd",
                               help="name of the source device")
    parser_notify.add_argument(
        "-c", action="store", dest="cache", required=True)

    # sanity
    parser_sanity = parser.add_parser('sanity')
    parser_sanity.add_argument("-s", action="store", dest="ssd",
                               required=True, help="name of the ssd device")
    parser_sanity.add_argument("-d", action="store", dest="hdd",
                               required=True, help="name of the source device")
    return mainparser


def setup_kernel_modules():
    run_cmd("/sbin/modprobe enhanceio")
    run_cmd("/sbin/modprobe enhanceio_fifo")
    run_cmd("/sbin/modprobe enhanceio_lru")
    run_cmd("/sbin/modprobe enhanceio_rand")


def main():

    mainparser = create_parser()
    args = mainparser.parse_args()

    logging.basicConfig(level=args.log_level)

    command = args.command

    if command == "create":
        setup_kernel_modules()
        if re.match('^[\w]+$', args.cache) is None:
            mainparser.error(
                "Cache name can contain only alphanumeric"
                " characters and underscore ('_')")
            return FAILURE

        cache = Cache_rec(name=args.cache, src_name=args.hdd,
                          ssd_name=args.ssd, policy=args.policy,
                          mode=args.mode, blksize=args.blksize)
        return cache.create(create_udev_rules=(not args.no_udev))

    elif command == "info":
        setup_kernel_modules()
        return print_all_cache_info(print_json=args.json)

    elif command == "edit":
        setup_kernel_modules()
        cache = Cache_rec(name=args.cache, policy=args.policy, mode=args.mode)
        return cache.edit()

    elif command == "delete":
        setup_kernel_modules()
        cache = Cache_rec(name=args.cache)
        return cache.delete()

    elif command == "clean":
        setup_kernel_modules()
        cache = Cache_rec(name=args.cache)
        return cache.clean()

    elif command == "enable":
        setup_kernel_modules()
        # This command will be fired by udev rule on SSD/Source addition
        cache = Cache_rec(name=args.cache, src_name=args.hdd,
                          ssd_name=args.ssd, policy=args.policy,
                          mode=args.mode, blksize=args.blksize, persistence=1)

        return cache.do_eio_ioctl(EIO_IOC_ENABLE)

    elif command == "notify":
        setup_kernel_modules()
        # This command will be fired by udev rule on SSD/Source addition
        if args.action == "reboot":
            cache = Cache_rec(name="dummy")
            return cache.do_eio_ioctl(EIO_IOC_ENABLE)

        elif args.action == "add":
            if args.ssd:
                cache = Cache_rec(name=args.cache,
                                  ssd_name=args.ssd, persistence=1)
                return cache.do_eio_ioctl(EIO_IOC_SSD_ADD)

            elif args.hdd:
                cache = Cache_rec(name=args.cache,
                                  ssd_name=args.hdd, persistence=1)
                return cache.do_eio_ioctl(EIO_IOC_SRC_ADD)

        elif args.action == "remove":
            if args.ssd:
                cache = Cache_rec(name=args.cache, ssd_name=args.ssd,
                                  persistence=1)
                return cache.do_eio_ioctl(EIO_IOC_SSD_REMOVE)
            elif args.hdd:
                cache = Cache_rec(name=args.cache, hdd_name=args.hdd,
                                  persistence=1)
                return cache.do_eio_ioctl(EIO_IOC_SRC_REMOVE)

        pass

    elif command == "sanity":
        # Performs a basic sanity check
        sanity(args.hdd, args.ssd)
        return SUCCESS

if __name__ == '__main__':
    sys.exit(main())
